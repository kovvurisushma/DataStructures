Problem Statement: Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
                   If the two linked lists have no intersection at all, return null.

link: https://leetcode.com/problems/intersection-of-two-linked-lists/description/

Approaches:
- Take a set and store all address of nodes of first linked list and now traverse through second linked list, if the address was found in hap then return the element.
- Here reversing the linked lists and finding the starting node doesn't work, because if we reverse the first linked list then the second linked list elements gets changed.
- so instead create 2 stacks, traverse through each linked list and push the address into stack, now after traversing start popping the addresses from stack til both the top elements are equal
- first find the length of both lists
  - N = len(h1), M = len(h2)
  - if(N > M) move h1: N - M steps forward
  - else move h1: M - N steps forward
  - then start comparing both lists address of nodes, when they are common then return.

Solution:

struct Node {
  int val;
  Node* next;
}

int intersection(Node* h1, Node* h2) {
  int l1 = length(h1);
  int l2 = length(h2);
  if(l1 < l2) {
    int buffer = l2 - l1;
    for(int i = 0; i< buffer; i++) h2 = h2 -> next;
  } else {
    int buffer = l1 - l2;
    for(int i = 0; i< buffer; i++) h1 = h1 -> next;
  }
  while(h1 && h2) {
    if(h1 == h2) return h1;
    else {
      h1 = h1 -> next;
      h2 = h2 -> next;
    }
  }
  return h1;
}
