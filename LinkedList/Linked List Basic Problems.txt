# Basic Programs/Operations in linked list

###Problem: 1 

Problem Statement: Given an array of integers, convert it into linked list
link: https://www.geeksforgeeks.org/create-linked-list-from-a-given-array/

Solution:

struct Node {
  int num;
  Node* next;
}

Node* createList(int arr[], int n) {
  Node linkedList = new Node(arr[0]);
  Node head = linkedList;
  for(int i = 1; i < n ; i++) {
    Node newNode = new Node(arr[i]);
    linkedList -> next = newNode;
    linkedList = linkedList -> next;
  }
  return head;
}


###Problem: 2
Problem Statement: Given a linked list. Print all the elements of the linked list.
link: https://www.geeksforgeeks.org/problems/print-linked-list-elements/1

Solution:

struct Node {
  int data;
  Node* next;
}

void PrintNodes(Node* head) {
  while(head) {
    cout << head -> data << " ";
    head = head -> next;
  }
}


###Problem: 3
Problem Statement: Find the length of the given LinkedList
link: https://www.geeksforgeeks.org/problems/count-nodes-of-linked-list/1

Solution:

struct Node {
  int data;
  Node* next;
}

// Iterative Solution
int lengthOfLL(Node* head) {
  int length = 0;
  while(head) {
    length++;
    head = head -> next;
  }
  return length;
}

// Recursive Solution
int lengthOfLL(Node* head) {
  if(head == NULL) return 0;
  return lengthOfLL(head -> next) + 1;
}


###Problem: 4
Problem Statement: Print data of the linked list in reverse order
link: https://www.geeksforgeeks.org/print-reverse-of-a-linked-list-without-actually-reversing/

Solution:

struct Node {
  int data;
  Node* next;
} 

void printReverse(Node* head) {
  if(head == NULL) return;
  printReverse(head -> next);
  cout << head -> data;
}

###Problem: 5
Problem Statement: Insert a node at a specific position in a linked list
link: https://www.geeksforgeeks.org/insert-a-node-at-a-specific-position-in-a-linked-list/
      https://www.hackerrank.com/challenges/insert-a-node-at-a-specific-position-in-a-linked-list/problem

Solution:

struct Node{
  int data;
   Node* next;
}

Node* insertElement(Node* head, int ele, int position) {
  int indx = 0;
  Node* newNode = new Node(ele);
  int indx = 0;
    while(indx <= position) {                      // constraint 0 <= pos <= length of linked list
        if(indx + 1 == position) {
            Node* temp = head -> next;
            head -> next = newNode;
            newNode -> next = temp;
        }
        head = head -> next;
        indx++; 
    }
    return res;
}


###Problem: 6
Problem Statement: insert element X in a sorted linked list
link: https://www.geeksforgeeks.org/problems/insert-in-a-sorted-list/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=bottom_sticky_on_article

Solution:

struct Node {
  int data;
  Node* next;
}

Node* sortedInsert(Node* head, int x) {
  Node* dummy = new Node(-1);
  Node* result = dummy;
  dummy -> next = head;
  Node* newNode = new Node(x);
  while(head) {
    if(x <= head -> data) {
      dummy -> next = newNode;
      newNode -> next = head;
      dummy = dummy -> next;
      return result -> next;
    }
    head = head -> next;
    dummy = dummy -> next;
  }
  dummy -> next = newNode;
return result -> next;
}

###Problem: 7 
Problem Statement: Delete Element at the given position from a linked list
link: https://www.geeksforgeeks.org/delete-a-linked-list-node-at-a-given-position/

Solution:

struct Node {
  int data;
  Node* next;
}

Node* delete(Node* head, int pos) {
  if(pos < 0 || pos > lengthOfLL(head)) return head;
  if(pos == 0) return head -> next;
  int indx = 0;
  Node* res = head;
  while(indx <= pos) {
    if(indx + 1 == pos) {
      head -> next = head -> next -> next;
      return res;
    }
    head = head -> next;
    indx++;
}
return res;
}

###Problem: 8
Problem Statement: Delete all nodes of a linked list with the given value;
link: https://leetcode.com/problems/remove-linked-list-elements/description/

Solution: 

struct Node{
  int data:
  Node* next;
}

Node* deleteAll(Node* head, int x) {
  Node* dummy = new Node(-1);
  Node* result = dummy;
  dummy -> next = head;
  while(head) {
    if(head -> data == x) {
      dummy -> next = head -> next;
    } else {
      dumy = dummy -> next;
    }
     head = head -> next;
  }
return result -> next;
}

###Problem: 9
Problem Statement: Remove elements that are repeated more than once in a sorted linked list
link: https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/

Solution:

struct Node{
  int data;
  Node* next;
}

Node* removeRepeated(Node* head) {
  Node* result = head;
  while(head) {
    Node* temp = head -> next;
    while(temp && temp -> data == head -> data) {
      temp = temp -> next;
    }
    head -> next = temp;
    head = head -> next;
  }
  return result
}

or

Node* removeRepeated(Node* head) {
  Node* result = head;
  while(head) {
    while(head -> next && head -> next -> data == head -> data) {
      head -> next = head -> next -> next;
    }
    head = head -> next;
  }
  return result;
}







