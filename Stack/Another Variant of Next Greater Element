/*
LeetCode: 739
Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100
*/

====================================================================================================================================================================================================

Approach:
- This is the slightly different of next greater element problem
- unlike the next greater element we can solve this in O(N) time and O(1) space complexity
- no need to use hashmap or stack here.
- this solution will be similar to next greater element approach 3 but no need to hashmap here as the results are already getting stored in results array.
- we can use that array itself to get the next greater element to current element

Solution:

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int[] results = new int[temperatures.length];
        results[temperatures.length - 1] = 0;
        for(int i = temperatures.length - 2; i >= 0 ; i--) {
            if(temperatures[i] < temperatures[i + 1]) {
                results[i] = 1;
            }
            else {
                int nextPossibleIndx = results[i + 1] == 0 ? 0 : i + results[i + 1] + 1;
                while(nextPossibleIndx != 0 && nextPossibleIndx < temperatures.length && temperatures[i] >= temperatures[nextPossibleIndx] ) {
                    nextPossibleIndx = results[nextPossibleIndx] == 0 ? 0 : nextPossibleIndx + results[nextPossibleIndx];
                }
                if(nextPossibleIndx == 0 || nextPossibleIndx >= temperatures.length) results[i] = 0;
                else if(temperatures[i] < temperatures[nextPossibleIndx]) results[i] = nextPossibleIndx - i;
            }
        }
        return results;
    }
}
