// LeetCode 150. Evaluate Reverse Polish Notation

You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Constraints:

1 <= tokens.length <= 104
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the range [-200, 200].
==============================================================================================================================================================================================

Approach
- Iterate over the given String(or array of characters) 
  - for every character 
    - if the character is a number then push into stack.
    - if it is an operator then pop the last two elements from the stack, perform the operation and push the result back into the stack. 
      here no need to verify any cases as they have mentioned that the post fix expression always valid.
  - pop the last remaining element present in the stack, which is the result of the expression. 

Solution: 

class Solution {
    Stack<Integer> s1 = new Stack<>();
    String operators = "+-*/";
    private int result(String operator, int a, int b) {
        switch(operator) {
            case "+" :
                return a + b;
            case "-":
                return a - b;
            case "*":
                return a * b;
            case "/":
                return a / b;
            default:
                return 0;
        }
    }
    public int evalRPN(String[] tokens) {
        for(int i = 0; i < tokens.length; i++) {
            String element = tokens[i];
            if(operators.contains(element)) {
                int a = s1.pop();
                int b = s1.pop();
                s1.push(result(element, b , a));
            }
            else s1.push(Integer.parseInt(element));
        }
        return s1.pop();
    }
}
